// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppEigen.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// emBLIMcpp
Rcpp::List emBLIMcpp(const Eigen::Map < Eigen::MatrixXd > R, const Eigen::Map < Eigen::MatrixXd > K, const Eigen::Map < Eigen::VectorXd > NR, Eigen::Map < Eigen::VectorXd > PK, Eigen::Map < Eigen::VectorXd > beta, Eigen::Map < Eigen::VectorXd > eta, const int maxiter, const double tol, const bool fdb);
RcppExport SEXP _pksCpp_emBLIMcpp(SEXP RSEXP, SEXP KSEXP, SEXP NRSEXP, SEXP PKSEXP, SEXP betaSEXP, SEXP etaSEXP, SEXP maxiterSEXP, SEXP tolSEXP, SEXP fdbSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::Map < Eigen::MatrixXd > >::type R(RSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map < Eigen::MatrixXd > >::type K(KSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map < Eigen::VectorXd > >::type NR(NRSEXP);
    Rcpp::traits::input_parameter< Eigen::Map < Eigen::VectorXd > >::type PK(PKSEXP);
    Rcpp::traits::input_parameter< Eigen::Map < Eigen::VectorXd > >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< Eigen::Map < Eigen::VectorXd > >::type eta(etaSEXP);
    Rcpp::traits::input_parameter< const int >::type maxiter(maxiterSEXP);
    Rcpp::traits::input_parameter< const double >::type tol(tolSEXP);
    Rcpp::traits::input_parameter< const bool >::type fdb(fdbSEXP);
    rcpp_result_gen = Rcpp::wrap(emBLIMcpp(R, K, NR, PK, beta, eta, maxiter, tol, fdb));
    return rcpp_result_gen;
END_RCPP
}
// emGLIMcpp
Rcpp::List emGLIMcpp(const Eigen::Map < Eigen::MatrixXd > weights, const Eigen::Map < Eigen::MatrixXd > R, const Eigen::Map < Eigen::MatrixXd > W, const Eigen::Map < Eigen::MatrixXd > K, const Eigen::Map < Eigen::VectorXd > NRr, const Eigen::Map < Eigen::VectorXd > PKr, const Eigen::Map < Eigen::VectorXd > betar, const Eigen::Map < Eigen::VectorXd > etar, const int maxiter, const double tol, const bool fdb);
RcppExport SEXP _pksCpp_emGLIMcpp(SEXP weightsSEXP, SEXP RSEXP, SEXP WSEXP, SEXP KSEXP, SEXP NRrSEXP, SEXP PKrSEXP, SEXP betarSEXP, SEXP etarSEXP, SEXP maxiterSEXP, SEXP tolSEXP, SEXP fdbSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::Map < Eigen::MatrixXd > >::type weights(weightsSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map < Eigen::MatrixXd > >::type R(RSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map < Eigen::MatrixXd > >::type W(WSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map < Eigen::MatrixXd > >::type K(KSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map < Eigen::VectorXd > >::type NRr(NRrSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map < Eigen::VectorXd > >::type PKr(PKrSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map < Eigen::VectorXd > >::type betar(betarSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map < Eigen::VectorXd > >::type etar(etarSEXP);
    Rcpp::traits::input_parameter< const int >::type maxiter(maxiterSEXP);
    Rcpp::traits::input_parameter< const double >::type tol(tolSEXP);
    Rcpp::traits::input_parameter< const bool >::type fdb(fdbSEXP);
    rcpp_result_gen = Rcpp::wrap(emGLIMcpp(weights, R, W, K, NRr, PKr, betar, etar, maxiter, tol, fdb));
    return rcpp_result_gen;
END_RCPP
}
// emIMBLIMcpp
Rcpp::List emIMBLIMcpp(const Eigen::Map<Eigen::MatrixXd> R, const Eigen::Map<Eigen::MatrixXd> W, const Eigen::Map<Eigen::MatrixXd> M, const Eigen::Map<Eigen::MatrixXd> K, const Eigen::Map<Eigen::VectorXd> NR, Eigen::Map<Eigen::VectorXd> PK, Eigen::Map<Eigen::VectorXd> beta, Eigen::Map<Eigen::VectorXd> eta, const Eigen::Map<Eigen::MatrixXd> PM, const int maxiter, const double tol, const bool fdb);
RcppExport SEXP _pksCpp_emIMBLIMcpp(SEXP RSEXP, SEXP WSEXP, SEXP MSEXP, SEXP KSEXP, SEXP NRSEXP, SEXP PKSEXP, SEXP betaSEXP, SEXP etaSEXP, SEXP PMSEXP, SEXP maxiterSEXP, SEXP tolSEXP, SEXP fdbSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::MatrixXd> >::type R(RSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::MatrixXd> >::type W(WSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::MatrixXd> >::type M(MSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::MatrixXd> >::type K(KSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::VectorXd> >::type NR(NRSEXP);
    Rcpp::traits::input_parameter< Eigen::Map<Eigen::VectorXd> >::type PK(PKSEXP);
    Rcpp::traits::input_parameter< Eigen::Map<Eigen::VectorXd> >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< Eigen::Map<Eigen::VectorXd> >::type eta(etaSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::MatrixXd> >::type PM(PMSEXP);
    Rcpp::traits::input_parameter< const int >::type maxiter(maxiterSEXP);
    Rcpp::traits::input_parameter< const double >::type tol(tolSEXP);
    Rcpp::traits::input_parameter< const bool >::type fdb(fdbSEXP);
    rcpp_result_gen = Rcpp::wrap(emIMBLIMcpp(R, W, M, K, NR, PK, beta, eta, PM, maxiter, tol, fdb));
    return rcpp_result_gen;
END_RCPP
}
// emMissBLIMcpp
Rcpp::List emMissBLIMcpp(const Eigen::Map<Eigen::MatrixXd> Rr, const Eigen::Map<Eigen::MatrixXd> Wr, const Eigen::Map<Eigen::MatrixXd> Mr, const Eigen::Map<Eigen::MatrixXd> Kr, const Eigen::Map<Eigen::VectorXd> NRr, const Eigen::Map<Eigen::VectorXd> PKr, const Eigen::Map<Eigen::VectorXd> etar, const Eigen::Map<Eigen::VectorXd> betar, const Eigen::Map<Eigen::VectorXd> mu0r, const Eigen::Map<Eigen::VectorXd> mu1r, const int maxiter, const double tol, const bool fdb);
RcppExport SEXP _pksCpp_emMissBLIMcpp(SEXP RrSEXP, SEXP WrSEXP, SEXP MrSEXP, SEXP KrSEXP, SEXP NRrSEXP, SEXP PKrSEXP, SEXP etarSEXP, SEXP betarSEXP, SEXP mu0rSEXP, SEXP mu1rSEXP, SEXP maxiterSEXP, SEXP tolSEXP, SEXP fdbSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::MatrixXd> >::type Rr(RrSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::MatrixXd> >::type Wr(WrSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::MatrixXd> >::type Mr(MrSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::MatrixXd> >::type Kr(KrSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::VectorXd> >::type NRr(NRrSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::VectorXd> >::type PKr(PKrSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::VectorXd> >::type etar(etarSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::VectorXd> >::type betar(betarSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::VectorXd> >::type mu0r(mu0rSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::VectorXd> >::type mu1r(mu1rSEXP);
    Rcpp::traits::input_parameter< const int >::type maxiter(maxiterSEXP);
    Rcpp::traits::input_parameter< const double >::type tol(tolSEXP);
    Rcpp::traits::input_parameter< const bool >::type fdb(fdbSEXP);
    rcpp_result_gen = Rcpp::wrap(emMissBLIMcpp(Rr, Wr, Mr, Kr, NRr, PKr, etar, betar, mu0r, mu1r, maxiter, tol, fdb));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_pksCpp_emBLIMcpp", (DL_FUNC) &_pksCpp_emBLIMcpp, 9},
    {"_pksCpp_emGLIMcpp", (DL_FUNC) &_pksCpp_emGLIMcpp, 11},
    {"_pksCpp_emIMBLIMcpp", (DL_FUNC) &_pksCpp_emIMBLIMcpp, 12},
    {"_pksCpp_emMissBLIMcpp", (DL_FUNC) &_pksCpp_emMissBLIMcpp, 13},
    {NULL, NULL, 0}
};

RcppExport void R_init_pksCpp(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
